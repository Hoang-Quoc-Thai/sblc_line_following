
Ver2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004a30  08004a30  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a30  08004a30  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000038  08004a70  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004a70  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aae5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edd  00000000  00000000  0002ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f5  00000000  00000000  0002d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d1e  00000000  00000000  0002def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1d2  00000000  00000000  00045c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c8a7  00000000  00000000  00052de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031e8  00000000  00000000  000df68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e2874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	080049ec 	.word	0x080049ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	080049ec 	.word	0x080049ec

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__gesf2>:
 8000d10:	f04f 3cff 	mov.w	ip, #4294967295
 8000d14:	e006      	b.n	8000d24 <__cmpsf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__lesf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	e002      	b.n	8000d24 <__cmpsf2+0x4>
 8000d1e:	bf00      	nop

08000d20 <__cmpsf2>:
 8000d20:	f04f 0c01 	mov.w	ip, #1
 8000d24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d34:	bf18      	it	ne
 8000d36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3a:	d011      	beq.n	8000d60 <__cmpsf2+0x40>
 8000d3c:	b001      	add	sp, #4
 8000d3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d42:	bf18      	it	ne
 8000d44:	ea90 0f01 	teqne	r0, r1
 8000d48:	bf58      	it	pl
 8000d4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d4e:	bf88      	it	hi
 8000d50:	17c8      	asrhi	r0, r1, #31
 8000d52:	bf38      	it	cc
 8000d54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d58:	bf18      	it	ne
 8000d5a:	f040 0001 	orrne.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d64:	d102      	bne.n	8000d6c <__cmpsf2+0x4c>
 8000d66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d6a:	d105      	bne.n	8000d78 <__cmpsf2+0x58>
 8000d6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d70:	d1e4      	bne.n	8000d3c <__cmpsf2+0x1c>
 8000d72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d76:	d0e1      	beq.n	8000d3c <__cmpsf2+0x1c>
 8000d78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__aeabi_cfrcmple>:
 8000d80:	4684      	mov	ip, r0
 8000d82:	4608      	mov	r0, r1
 8000d84:	4661      	mov	r1, ip
 8000d86:	e7ff      	b.n	8000d88 <__aeabi_cfcmpeq>

08000d88 <__aeabi_cfcmpeq>:
 8000d88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d8a:	f7ff ffc9 	bl	8000d20 <__cmpsf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	bf48      	it	mi
 8000d92:	f110 0f00 	cmnmi.w	r0, #0
 8000d96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d98 <__aeabi_fcmpeq>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff fff4 	bl	8000d88 <__aeabi_cfcmpeq>
 8000da0:	bf0c      	ite	eq
 8000da2:	2001      	moveq	r0, #1
 8000da4:	2000      	movne	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_fcmplt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffea 	bl	8000d88 <__aeabi_cfcmpeq>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_fcmple>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffe0 	bl	8000d88 <__aeabi_cfcmpeq>
 8000dc8:	bf94      	ite	ls
 8000dca:	2001      	movls	r0, #1
 8000dcc:	2000      	movhi	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_fcmpge>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffd2 	bl	8000d80 <__aeabi_cfrcmple>
 8000ddc:	bf94      	ite	ls
 8000dde:	2001      	movls	r0, #1
 8000de0:	2000      	movhi	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_fcmpgt>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffc8 	bl	8000d80 <__aeabi_cfrcmple>
 8000df0:	bf34      	ite	cc
 8000df2:	2001      	movcc	r0, #1
 8000df4:	2000      	movcs	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_f2iz>:
 8000dfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e04:	d30f      	bcc.n	8000e26 <__aeabi_f2iz+0x2a>
 8000e06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e0e:	d90d      	bls.n	8000e2c <__aeabi_f2iz+0x30>
 8000e10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e18:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e1c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e20:	bf18      	it	ne
 8000e22:	4240      	negne	r0, r0
 8000e24:	4770      	bx	lr
 8000e26:	f04f 0000 	mov.w	r0, #0
 8000e2a:	4770      	bx	lr
 8000e2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e30:	d101      	bne.n	8000e36 <__aeabi_f2iz+0x3a>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d105      	bne.n	8000e42 <__aeabi_f2iz+0x46>
 8000e36:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	4770      	bx	lr

08000e48 <robot_setSpeed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void robot_setSpeed(int16_t left_speed, int16_t right_speed)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	// left speed process - motor left
	if(left_speed > 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dd09      	ble.n	8000e74 <robot_setSpeed+0x2c>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_speed);
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <robot_setSpeed+0xbc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <robot_setSpeed+0xbc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
 8000e72:	e019      	b.n	8000ea8 <robot_setSpeed+0x60>
	}
	else if(left_speed < 0)
 8000e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da0d      	bge.n	8000e98 <robot_setSpeed+0x50>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <robot_setSpeed+0xbc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, abs(left_speed));
 8000e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bfb8      	it	lt
 8000e8c:	425b      	neglt	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <robot_setSpeed+0xbc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
 8000e96:	e007      	b.n	8000ea8 <robot_setSpeed+0x60>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <robot_setSpeed+0xbc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <robot_setSpeed+0xbc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// right speed process - motor right
	if(right_speed > 0)
 8000ea8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dd09      	ble.n	8000ec4 <robot_setSpeed+0x7c>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, right_speed);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <robot_setSpeed+0xbc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <robot_setSpeed+0xbc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	}
}
 8000ec2:	e019      	b.n	8000ef8 <robot_setSpeed+0xb0>
	else if(right_speed < 0)
 8000ec4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da0d      	bge.n	8000ee8 <robot_setSpeed+0xa0>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <robot_setSpeed+0xbc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, abs(right_speed));
 8000ed4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb8      	it	lt
 8000edc:	425b      	neglt	r3, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <robot_setSpeed+0xbc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ee6:	e007      	b.n	8000ef8 <robot_setSpeed+0xb0>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <robot_setSpeed+0xbc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <robot_setSpeed+0xbc>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000c8 	.word	0x200000c8

08000f08 <robot_PIDCalib>:

void robot_PIDCalib(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	err = sensor_value[2] - sensor_value[0];
 8000f0c:	4b50      	ldr	r3, [pc, #320]	; (8001050 <robot_PIDCalib+0x148>)
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <robot_PIDCalib+0x148>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fea5 	bl	8000c68 <__aeabi_i2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a4c      	ldr	r2, [pc, #304]	; (8001054 <robot_PIDCalib+0x14c>)
 8000f22:	6013      	str	r3, [r2, #0]

	uP = kP * err;
 8000f24:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <robot_PIDCalib+0x14c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f90f 	bl	8000150 <__aeabi_fmul>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b48      	ldr	r3, [pc, #288]	; (8001058 <robot_PIDCalib+0x150>)
 8000f38:	601a      	str	r2, [r3, #0]
	uD = kD * ((err - pre_err) / deltaT);
 8000f3a:	4b46      	ldr	r3, [pc, #280]	; (8001054 <robot_PIDCalib+0x14c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a47      	ldr	r2, [pc, #284]	; (800105c <robot_PIDCalib+0x154>)
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fdd9 	bl	8000afc <__aeabi_fsub>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb17 	bl	8000580 <__aeabi_f2d>
 8000f52:	a33b      	add	r3, pc, #236	; (adr r3, 8001040 <robot_PIDCalib+0x138>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fc94 	bl	8000884 <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	a338      	add	r3, pc, #224	; (adr r3, 8001048 <robot_PIDCalib+0x140>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fb61 	bl	8000630 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fd6d 	bl	8000a54 <__aeabi_d2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a38      	ldr	r2, [pc, #224]	; (8001060 <robot_PIDCalib+0x158>)
 8000f7e:	6013      	str	r3, [r2, #0]
	pre_err = err;
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <robot_PIDCalib+0x14c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <robot_PIDCalib+0x154>)
 8000f86:	6013      	str	r3, [r2, #0]

	u = uP + uD;
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <robot_PIDCalib+0x150>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a34      	ldr	r2, [pc, #208]	; (8001060 <robot_PIDCalib+0x158>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fdb4 	bl	8000b00 <__addsf3>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <robot_PIDCalib+0x15c>)
 8000f9e:	601a      	str	r2, [r3, #0]

	if(u > 1000) u = 1000;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <robot_PIDCalib+0x15c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4930      	ldr	r1, [pc, #192]	; (8001068 <robot_PIDCalib+0x160>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff1e 	bl	8000de8 <__aeabi_fcmpgt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <robot_PIDCalib+0xb2>
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <robot_PIDCalib+0x15c>)
 8000fb4:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <robot_PIDCalib+0x160>)
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e00b      	b.n	8000fd2 <robot_PIDCalib+0xca>
	else if(u < -1000) u = -1000;
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <robot_PIDCalib+0x15c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	492b      	ldr	r1, [pc, #172]	; (800106c <robot_PIDCalib+0x164>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fef3 	bl	8000dac <__aeabi_fcmplt>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <robot_PIDCalib+0xca>
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <robot_PIDCalib+0x15c>)
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <robot_PIDCalib+0x164>)
 8000fd0:	601a      	str	r2, [r3, #0]

	left_speed = intial_speed + u;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <robot_PIDCalib+0x168>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe45 	bl	8000c68 <__aeabi_i2f>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <robot_PIDCalib+0x15c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f7ff fd8a 	bl	8000b00 <__addsf3>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff04 	bl	8000dfc <__aeabi_f2iz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <robot_PIDCalib+0x16c>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	right_speed = intial_speed - u;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <robot_PIDCalib+0x168>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe30 	bl	8000c68 <__aeabi_i2f>
 8001008:	4602      	mov	r2, r0
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <robot_PIDCalib+0x15c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	4610      	mov	r0, r2
 8001012:	f7ff fd73 	bl	8000afc <__aeabi_fsub>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff feef 	bl	8000dfc <__aeabi_f2iz>
 800101e:	4603      	mov	r3, r0
 8001020:	b21a      	sxth	r2, r3
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <robot_PIDCalib+0x170>)
 8001024:	801a      	strh	r2, [r3, #0]

	robot_setSpeed(left_speed, right_speed);
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <robot_PIDCalib+0x16c>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <robot_PIDCalib+0x170>)
 800102e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff07 	bl	8000e48 <robot_setSpeed>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	d2f1a9fc 	.word	0xd2f1a9fc
 8001044:	3f50624d 	.word	0x3f50624d
 8001048:	33333333 	.word	0x33333333
 800104c:	3fd33333 	.word	0x3fd33333
 8001050:	200001ac 	.word	0x200001ac
 8001054:	200001bc 	.word	0x200001bc
 8001058:	200001c4 	.word	0x200001c4
 800105c:	200001c0 	.word	0x200001c0
 8001060:	200001c8 	.word	0x200001c8
 8001064:	200001cc 	.word	0x200001cc
 8001068:	447a0000 	.word	0x447a0000
 800106c:	c47a0000 	.word	0xc47a0000
 8001070:	200001a6 	.word	0x200001a6
 8001074:	200001a2 	.word	0x200001a2
 8001078:	200001a4 	.word	0x200001a4

0800107c <sensor_writeLED>:

uint8_t sensor_writeLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	uint8_t temp;
	for(uint8_t i = 0 ; i < 3; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	e030      	b.n	80010ea <sensor_writeLED+0x6e>
	{
		temp <<= 0x01;
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
		if(sensor_value[i] > v_compare[i])
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <sensor_writeLED+0x80>)
 8001092:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	4919      	ldr	r1, [pc, #100]	; (8001100 <sensor_writeLED+0x84>)
 800109a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d910      	bls.n	80010c4 <sensor_writeLED+0x48>
		{
			HAL_GPIO_WritePin(sensor_led_port[i], sensor_led_pin[i], 1);
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <sensor_writeLED+0x88>)
 80010a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <sensor_writeLED+0x8c>)
 80010ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	f002 f820 	bl	80030fa <HAL_GPIO_WritePin>
			temp |= 0x01;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e00f      	b.n	80010e4 <sensor_writeLED+0x68>
		}
		else
		{
			HAL_GPIO_WritePin(sensor_led_port[i], sensor_led_pin[i], 0);
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <sensor_writeLED+0x88>)
 80010c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <sensor_writeLED+0x8c>)
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f002 f80f 	bl	80030fa <HAL_GPIO_WritePin>
			temp &= 0x06;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 0306 	and.w	r3, r3, #6
 80010e2:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0 ; i < 3; i++)
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d9cb      	bls.n	8001088 <sensor_writeLED+0xc>
		}
	}
	return temp;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001ac 	.word	0x200001ac
 8001100:	200001b4 	.word	0x200001b4
 8001104:	20000018 	.word	0x20000018
 8001108:	20000024 	.word	0x20000024

0800110c <robot_setRGB>:

void robot_setRGB(uint8_t R, uint8_t G, uint8_t B)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	4613      	mov	r3, r2
 800111c:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, R);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <robot_setRGB+0x44>)
 8001128:	f001 ffe7 	bl	80030fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, G);
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	461a      	mov	r2, r3
 8001130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <robot_setRGB+0x44>)
 8001136:	f001 ffe0 	bl	80030fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, B);
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	461a      	mov	r2, r3
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <robot_setRGB+0x44>)
 8001144:	f001 ffd9 	bl	80030fa <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010c00 	.word	0x40010c00

08001154 <robot_beepLong>:

void robot_beepLong(uint16_t millisec)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	2110      	movs	r1, #16
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <robot_beepLong+0x30>)
 8001164:	f001 ffc9 	bl	80030fa <HAL_GPIO_WritePin>
	HAL_Delay(millisec);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 ff6c 	bl	8002048 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2110      	movs	r1, #16
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <robot_beepLong+0x30>)
 8001176:	f001 ffc0 	bl	80030fa <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40010c00 	.word	0x40010c00

08001188 <robot_setBuzzer>:

void robot_setBuzzer(uint16_t millisec, uint8_t numOfBeep)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < numOfBeep; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e00a      	b.n	80011b4 <robot_setBuzzer+0x2c>
	{
		robot_beepLong(millisec);
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffd7 	bl	8001154 <robot_beepLong>
		HAL_Delay(millisec);
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 ff4d 	bl	8002048 <HAL_Delay>
	for(uint8_t i = 0; i < numOfBeep; i++)
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	3301      	adds	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	797b      	ldrb	r3, [r7, #5]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3f0      	bcc.n	800119e <robot_setBuzzer+0x16>
	}
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <button_handle>:

void button_handle(void)
{
 80011c8:	b598      	push	{r3, r4, r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 80011cc:	2101      	movs	r1, #1
 80011ce:	482a      	ldr	r0, [pc, #168]	; (8001278 <button_handle+0xb0>)
 80011d0:	f001 ff7c 	bl	80030cc <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin) << 2) |
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <button_handle+0xb4>)
 80011de:	f001 ff75 	bl	80030cc <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	009b      	lsls	r3, r3, #2
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	4323      	orrs	r3, r4
 80011ea:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin) << 1) |
 80011ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f0:	4823      	ldr	r0, [pc, #140]	; (8001280 <button_handle+0xb8>)
 80011f2:	f001 ff6b 	bl	80030cc <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	005b      	lsls	r3, r3, #1
				   (HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin) << 2) |
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	4323      	orrs	r3, r4
 80011fe:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin) << 0);
 8001200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <button_handle+0xb4>)
 8001206:	f001 ff61 	bl	80030cc <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	b25b      	sxtb	r3, r3
				   (HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin) << 1) |
 800120e:	4323      	orrs	r3, r4
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2da      	uxtb	r2, r3
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <button_handle+0xbc>)
 8001216:	701a      	strb	r2, [r3, #0]

	switch(button_event)
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <button_handle+0xbc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3b07      	subs	r3, #7
 800121e:	2b08      	cmp	r3, #8
 8001220:	d828      	bhi.n	8001274 <button_handle+0xac>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <button_handle+0x60>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	0800124d 	.word	0x0800124d
 800122c:	08001275 	.word	0x08001275
 8001230:	08001275 	.word	0x08001275
 8001234:	08001275 	.word	0x08001275
 8001238:	08001255 	.word	0x08001255
 800123c:	08001275 	.word	0x08001275
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001265 	.word	0x08001265
 8001248:	0800126d 	.word	0x0800126d
	{
		// khi button 1 duoc nhan
		case 7:
			run_case = LEARN_AUTO;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <button_handle+0xc0>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
			break;
 8001252:	e00f      	b.n	8001274 <button_handle+0xac>

		// khi button 2 duoc nhan
		case 11:
			run_case = LEARN_MANUAL;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <button_handle+0xc0>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
			break;
 800125a:	e00b      	b.n	8001274 <button_handle+0xac>

		// khi button 3 duoc nhan
		case 13:
			run_case = RUN_NO_TC;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <button_handle+0xc0>)
 800125e:	2203      	movs	r2, #3
 8001260:	701a      	strb	r2, [r3, #0]
			break;
 8001262:	e007      	b.n	8001274 <button_handle+0xac>

		// khi button 4 duoc nhan
		case 14:
			run_case = RUN_WITH_TC;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <button_handle+0xc0>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
			break;
 800126a:	e003      	b.n	8001274 <button_handle+0xac>

		case 15:
			run_case = STOP;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <button_handle+0xc0>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			break;
 8001272:	bf00      	nop
	}
}
 8001274:	bf00      	nop
 8001276:	bd98      	pop	{r3, r4, r7, pc}
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40010800 	.word	0x40010800
 8001280:	40011000 	.word	0x40011000
 8001284:	200001d0 	.word	0x200001d0
 8001288:	200001a0 	.word	0x200001a0

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f000 fea7 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f967 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129a:	f000 fb5f 	bl	800195c <MX_GPIO_Init>
  MX_DMA_Init();
 800129e:	f000 fb3f 	bl	8001920 <MX_DMA_Init>
  MX_TIM2_Init();
 80012a2:	f000 fa27 	bl	80016f4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012a6:	f000 f9bb 	bl	8001620 <MX_ADC1_Init>
  MX_TIM4_Init();
 80012aa:	f000 faeb 	bl	8001884 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012ae:	f000 fa9b 	bl	80017e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80012b2:	489f      	ldr	r0, [pc, #636]	; (8001530 <main+0x2a4>)
 80012b4:	f002 fc6c 	bl	8003b90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80012b8:	489e      	ldr	r0, [pc, #632]	; (8001534 <main+0x2a8>)
 80012ba:	f002 fc69 	bl	8003b90 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	489d      	ldr	r0, [pc, #628]	; (8001538 <main+0x2ac>)
 80012c2:	f002 fd07 	bl	8003cd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	489b      	ldr	r0, [pc, #620]	; (8001538 <main+0x2ac>)
 80012ca:	f002 fd03 	bl	8003cd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012ce:	2108      	movs	r1, #8
 80012d0:	4899      	ldr	r0, [pc, #612]	; (8001538 <main+0x2ac>)
 80012d2:	f002 fcff 	bl	8003cd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012d6:	210c      	movs	r1, #12
 80012d8:	4897      	ldr	r0, [pc, #604]	; (8001538 <main+0x2ac>)
 80012da:	f002 fcfb 	bl	8003cd4 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) sensor_value, 4);
 80012de:	2204      	movs	r2, #4
 80012e0:	4996      	ldr	r1, [pc, #600]	; (800153c <main+0x2b0>)
 80012e2:	4897      	ldr	r0, [pc, #604]	; (8001540 <main+0x2b4>)
 80012e4:	f000 ffac 	bl	8002240 <HAL_ADC_Start_DMA>

  robot_setRGB(1, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff ff0d 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 fea8 	bl	8002048 <HAL_Delay>
  robot_setRGB(0, 1, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff05 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f000 fea0 	bl	8002048 <HAL_Delay>
  robot_setRGB(0, 0, 1);
 8001308:	2201      	movs	r2, #1
 800130a:	2100      	movs	r1, #0
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fefd 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f000 fe98 	bl	8002048 <HAL_Delay>
  robot_setRGB(1, 1, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fef5 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f000 fe90 	bl	8002048 <HAL_Delay>
  robot_setRGB(0, 1, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	2101      	movs	r1, #1
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff feed 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f000 fe88 	bl	8002048 <HAL_Delay>
  robot_setRGB(1, 0, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	2100      	movs	r1, #0
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fee5 	bl	800110c <robot_setRGB>
  HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f000 fe80 	bl	8002048 <HAL_Delay>
  robot_setRGB(1, 1, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	2101      	movs	r1, #1
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fedd 	bl	800110c <robot_setRGB>
  HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f000 fe77 	bl	8002048 <HAL_Delay>
  robot_setRGB(0, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fed4 	bl	800110c <robot_setRGB>

  robot_setBuzzer(100, 3);
 8001364:	2103      	movs	r1, #3
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f7ff ff0e 	bl	8001188 <robot_setBuzzer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(run_case)
 800136c:	4b75      	ldr	r3, [pc, #468]	; (8001544 <main+0x2b8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d8fb      	bhi.n	800136c <main+0xe0>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <main+0xf0>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	0800136d 	.word	0x0800136d
 8001380:	08001391 	.word	0x08001391
 8001384:	08001453 	.word	0x08001453
 8001388:	08001501 	.word	0x08001501
 800138c:	08001523 	.word	0x08001523
	{
		case LEARN_AUTO:
			robot_setBuzzer(500, 3);
 8001390:	2103      	movs	r1, #3
 8001392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001396:	f7ff fef7 	bl	8001188 <robot_setBuzzer>
			for(uint32_t i = 0; i < 500000; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e04c      	b.n	800143a <main+0x1ae>
			{
				robot_setSpeed(200, -200);
 80013a0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80013a4:	20c8      	movs	r0, #200	; 0xc8
 80013a6:	f7ff fd4f 	bl	8000e48 <robot_setSpeed>
				for(uint8_t j = 0; j < 3; j++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	72fb      	strb	r3, [r7, #11]
 80013ae:	e03e      	b.n	800142e <main+0x1a2>
				{
					if(sensor_value[j] > maxOfMin[j])
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	4a62      	ldr	r2, [pc, #392]	; (800153c <main+0x2b0>)
 80013b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	4963      	ldr	r1, [pc, #396]	; (8001548 <main+0x2bc>)
 80013bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d907      	bls.n	80013d4 <main+0x148>
					{
						maxOfMin[j] = sensor_value[j];
 80013c4:	7afa      	ldrb	r2, [r7, #11]
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	495c      	ldr	r1, [pc, #368]	; (800153c <main+0x2b0>)
 80013ca:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80013ce:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <main+0x2bc>)
 80013d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(sensor_value[j] < minOfMax[j])
 80013d4:	7afb      	ldrb	r3, [r7, #11]
 80013d6:	4a59      	ldr	r2, [pc, #356]	; (800153c <main+0x2b0>)
 80013d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	495b      	ldr	r1, [pc, #364]	; (800154c <main+0x2c0>)
 80013e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <main+0x16c>
					{
						minOfMax[j] = sensor_value[j];
 80013e8:	7afa      	ldrb	r2, [r7, #11]
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	4953      	ldr	r1, [pc, #332]	; (800153c <main+0x2b0>)
 80013ee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80013f2:	4a56      	ldr	r2, [pc, #344]	; (800154c <main+0x2c0>)
 80013f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					v_compare[j] = ((minOfMax[j] + maxOfMin[j]) / 2) + calib_weight[j];
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	4a54      	ldr	r2, [pc, #336]	; (800154c <main+0x2c0>)
 80013fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001400:	4619      	mov	r1, r3
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	4a50      	ldr	r2, [pc, #320]	; (8001548 <main+0x2bc>)
 8001406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800140a:	440b      	add	r3, r1
 800140c:	0fda      	lsrs	r2, r3, #31
 800140e:	4413      	add	r3, r2
 8001410:	105b      	asrs	r3, r3, #1
 8001412:	b299      	uxth	r1, r3
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <main+0x2c4>)
 8001418:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	440a      	add	r2, r1
 8001420:	b291      	uxth	r1, r2
 8001422:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <main+0x2c8>)
 8001424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint8_t j = 0; j < 3; j++)
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	3301      	adds	r3, #1
 800142c:	72fb      	strb	r3, [r7, #11]
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d9bd      	bls.n	80013b0 <main+0x124>
			for(uint32_t i = 0; i < 500000; i++)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4a46      	ldr	r2, [pc, #280]	; (8001558 <main+0x2cc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d9ae      	bls.n	80013a0 <main+0x114>
				}
			}
			robot_setSpeed(0, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fcff 	bl	8000e48 <robot_setSpeed>
			run_case = STOP;
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <main+0x2b8>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			break;
 8001450:	e06c      	b.n	800152c <main+0x2a0>
		case LEARN_MANUAL:
			robot_setBuzzer(200, 3);
 8001452:	2103      	movs	r1, #3
 8001454:	20c8      	movs	r0, #200	; 0xc8
 8001456:	f7ff fe97 	bl	8001188 <robot_setBuzzer>
			for(uint32_t i = 0; i < 500000; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	e047      	b.n	80014f0 <main+0x264>
			{
				for(uint8_t j = 0; j < 3; j++)
 8001460:	2300      	movs	r3, #0
 8001462:	70fb      	strb	r3, [r7, #3]
 8001464:	e03e      	b.n	80014e4 <main+0x258>
				{
					if(sensor_value[j] > maxOfMin[j])
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	4a34      	ldr	r2, [pc, #208]	; (800153c <main+0x2b0>)
 800146a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <main+0x2bc>)
 8001472:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001476:	429a      	cmp	r2, r3
 8001478:	d907      	bls.n	800148a <main+0x1fe>
					{
						maxOfMin[j] = sensor_value[j];
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	492f      	ldr	r1, [pc, #188]	; (800153c <main+0x2b0>)
 8001480:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <main+0x2bc>)
 8001486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(sensor_value[j] < minOfMax[j])
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	4a2b      	ldr	r2, [pc, #172]	; (800153c <main+0x2b0>)
 800148e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	492d      	ldr	r1, [pc, #180]	; (800154c <main+0x2c0>)
 8001496:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800149a:	429a      	cmp	r2, r3
 800149c:	d207      	bcs.n	80014ae <main+0x222>
					{
						minOfMax[j] = sensor_value[j];
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	4926      	ldr	r1, [pc, #152]	; (800153c <main+0x2b0>)
 80014a4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <main+0x2c0>)
 80014aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					v_compare[j] = ((minOfMax[j] + maxOfMin[j]) / 2) + calib_weight[j];
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <main+0x2c0>)
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	4619      	mov	r1, r3
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <main+0x2bc>)
 80014bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c0:	440b      	add	r3, r1
 80014c2:	0fda      	lsrs	r2, r3, #31
 80014c4:	4413      	add	r3, r2
 80014c6:	105b      	asrs	r3, r3, #1
 80014c8:	b299      	uxth	r1, r3
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <main+0x2c4>)
 80014ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	440a      	add	r2, r1
 80014d6:	b291      	uxth	r1, r2
 80014d8:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <main+0x2c8>)
 80014da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint8_t j = 0; j < 3; j++)
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	3301      	adds	r3, #1
 80014e2:	70fb      	strb	r3, [r7, #3]
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d9bd      	bls.n	8001466 <main+0x1da>
			for(uint32_t i = 0; i < 500000; i++)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3301      	adds	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <main+0x2cc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d9b3      	bls.n	8001460 <main+0x1d4>
				}
			}
			run_case = STOP;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <main+0x2b8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			break;
 80014fe:	e015      	b.n	800152c <main+0x2a0>
		case RUN_NO_TC:
			if((sensor_mask & 0x0f) == 0x02)
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <main+0x2d0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	2b02      	cmp	r3, #2
 800150a:	d106      	bne.n	800151a <main+0x28e>
			{
				robot_beepLong(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f7ff fe20 	bl	8001154 <robot_beepLong>
				pid_enable = 1;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <main+0x2d4>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			}
			run_case = STOP;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <main+0x2b8>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
			break;
 8001520:	e004      	b.n	800152c <main+0x2a0>
		case RUN_WITH_TC:
			run_with_sensor = 1;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <main+0x2d8>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
			break;
 8001528:	bf00      	nop
 800152a:	e71f      	b.n	800136c <main+0xe0>
	switch(run_case)
 800152c:	e71e      	b.n	800136c <main+0xe0>
 800152e:	bf00      	nop
 8001530:	20000110 	.word	0x20000110
 8001534:	20000158 	.word	0x20000158
 8001538:	200000c8 	.word	0x200000c8
 800153c:	200001ac 	.word	0x200001ac
 8001540:	20000054 	.word	0x20000054
 8001544:	200001a0 	.word	0x200001a0
 8001548:	20000008 	.word	0x20000008
 800154c:	20000000 	.word	0x20000000
 8001550:	20000010 	.word	0x20000010
 8001554:	200001b4 	.word	0x200001b4
 8001558:	0007a11f 	.word	0x0007a11f
 800155c:	200001a8 	.word	0x200001a8
 8001560:	200001ba 	.word	0x200001ba
 8001564:	200001bb 	.word	0x200001bb

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001572:	2228      	movs	r2, #40	; 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa0c 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fdb4 	bl	800312c <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ca:	f000 fad7 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2102      	movs	r1, #2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 f820 	bl	8003630 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015f6:	f000 fac1 	bl	8001b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015fa:	2302      	movs	r3, #2
 80015fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001602:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f002 f9bc 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001612:	f000 fab3 	bl	8001b7c <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	3750      	adds	r7, #80	; 0x50
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001632:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <MX_ADC1_Init+0xd0>)
 8001634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001640:	2201      	movs	r2, #1
 8001642:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001646:	2200      	movs	r2, #0
 8001648:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_ADC1_Init+0xcc>)
 800164c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <MX_ADC1_Init+0xcc>)
 800165a:	2204      	movs	r2, #4
 800165c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001660:	f000 fd16 	bl	8002090 <HAL_ADC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800166a:	f000 fa87 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800166e:	2306      	movs	r3, #6
 8001670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001672:	2301      	movs	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001676:	2307      	movs	r3, #7
 8001678:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <MX_ADC1_Init+0xcc>)
 8001680:	f000 fed8 	bl	8002434 <HAL_ADC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fa77 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800168e:	2305      	movs	r3, #5
 8001690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001692:	2302      	movs	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4814      	ldr	r0, [pc, #80]	; (80016ec <MX_ADC1_Init+0xcc>)
 800169c:	f000 feca 	bl	8002434 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80016a6:	f000 fa69 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016ae:	2303      	movs	r3, #3
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_ADC1_Init+0xcc>)
 80016b8:	f000 febc 	bl	8002434 <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016c2:	f000 fa5b 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016c6:	2309      	movs	r3, #9
 80016c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016ca:	2304      	movs	r3, #4
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_ADC1_Init+0xcc>)
 80016d4:	f000 feae 	bl	8002434 <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80016de:	f000 fa4d 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000054 	.word	0x20000054
 80016f0:	40012400 	.word	0x40012400

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001720:	2247      	movs	r2, #71	; 0x47
 8001722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_TIM2_Init+0xf0>)
 800172c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <MX_TIM2_Init+0xf0>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001740:	f002 fa78 	bl	8003c34 <HAL_TIM_PWM_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800174a:	f000 fa17 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	4619      	mov	r1, r3
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <MX_TIM2_Init+0xf0>)
 800175e:	f003 f8a9 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001768:	f000 fa08 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	2360      	movs	r3, #96	; 0x60
 800176e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	4619      	mov	r1, r3
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <MX_TIM2_Init+0xf0>)
 8001784:	f002 fc38 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800178e:	f000 f9f5 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_TIM2_Init+0xf0>)
 800179a:	f002 fc2d 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017a4:	f000 f9ea 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2208      	movs	r2, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <MX_TIM2_Init+0xf0>)
 80017b0:	f002 fc22 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80017ba:	f000 f9df 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	220c      	movs	r2, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM2_Init+0xf0>)
 80017c6:	f002 fc17 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80017d0:	f000 f9d4 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM2_Init+0xf0>)
 80017d6:	f000 fae7 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000c8 	.word	0x200000c8

080017e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_TIM3_Init+0x94>)
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <MX_TIM3_Init+0x98>)
 8001808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_TIM3_Init+0x94>)
 800180c:	2247      	movs	r2, #71	; 0x47
 800180e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_TIM3_Init+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_TIM3_Init+0x94>)
 8001818:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_TIM3_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_TIM3_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <MX_TIM3_Init+0x94>)
 800182c:	f002 f960 	bl	8003af0 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001836:	f000 f9a1 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM3_Init+0x94>)
 8001848:	f002 fc98 	bl	800417c <HAL_TIM_ConfigClockSource>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 f993 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_TIM3_Init+0x94>)
 8001864:	f003 f826 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800186e:	f000 f985 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000110 	.word	0x20000110
 8001880:	40000400 	.word	0x40000400

08001884 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_TIM4_Init+0x94>)
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <MX_TIM4_Init+0x98>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_TIM4_Init+0x94>)
 80018a8:	2247      	movs	r2, #71	; 0x47
 80018aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM4_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_TIM4_Init+0x94>)
 80018b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_TIM4_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_TIM4_Init+0x94>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <MX_TIM4_Init+0x94>)
 80018c8:	f002 f912 	bl	8003af0 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80018d2:	f000 f953 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM4_Init+0x94>)
 80018e4:	f002 fc4a 	bl	800417c <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018ee:	f000 f945 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM4_Init+0x94>)
 8001900:	f002 ffd8 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800190a:	f000 f937 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000158 	.word	0x20000158
 800191c:	40000800 	.word	0x40000800

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_DMA_Init+0x38>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <MX_DMA_Init+0x38>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_DMA_Init+0x38>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	200b      	movs	r0, #11
 8001944:	f001 f825 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001948:	200b      	movs	r0, #11
 800194a:	f001 f83e 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <MX_GPIO_Init+0x11c>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <MX_GPIO_Init+0x11c>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <MX_GPIO_Init+0x11c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <MX_GPIO_Init+0x11c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <MX_GPIO_Init+0x11c>)
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <MX_GPIO_Init+0x11c>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a34      	ldr	r2, [pc, #208]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <MX_GPIO_Init+0x11c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|B_Pin|G_Pin
 80019d0:	2200      	movs	r2, #0
 80019d2:	f24e 4114 	movw	r1, #58388	; 0xe414
 80019d6:	4829      	ldr	r0, [pc, #164]	; (8001a7c <MX_GPIO_Init+0x120>)
 80019d8:	f001 fb8f 	bl	80030fa <HAL_GPIO_WritePin>
                          |R_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e2:	4827      	ldr	r0, [pc, #156]	; (8001a80 <MX_GPIO_Init+0x124>)
 80019e4:	f001 fb89 	bl	80030fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT3_Pin */
  GPIO_InitStruct.Pin = BT3_Pin;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT3_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	4821      	ldr	r0, [pc, #132]	; (8001a84 <MX_GPIO_Init+0x128>)
 80019fe:	f001 f9e1 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT4_Pin;
 8001a02:	f248 0380 	movw	r3, #32896	; 0x8080
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4619      	mov	r1, r3
 8001a16:	481a      	ldr	r0, [pc, #104]	; (8001a80 <MX_GPIO_Init+0x124>)
 8001a18:	f001 f9d4 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_GPIO_Init+0x120>)
 8001a30:	f001 f9c8 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin B_Pin G_Pin
                           R_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|B_Pin|G_Pin
 8001a34:	f24e 4314 	movw	r3, #58388	; 0xe414
 8001a38:	613b      	str	r3, [r7, #16]
                          |R_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <MX_GPIO_Init+0x120>)
 8001a4e:	f001 f9b9 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_GPIO_Init+0x124>)
 8001a6c:	f001 f9aa 	bl	8002dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40011000 	.word	0x40011000

08001a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a9a:	f000 fab9 	bl	8002010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d122      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x66>
	if(pid_enable == 1)
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d117      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		if(sensor_value[1] > v_compare[1])
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ab2:	885a      	ldrh	r2, [r3, #2]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ab6:	885b      	ldrh	r3, [r3, #2]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d918      	bls.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			if(intial_speed < intialSpeed)
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001ac6:	da08      	bge.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				intial_speed+=2;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ad8:	801a      	strh	r2, [r3, #0]
			}
			robot_PIDCalib();
 8001ada:	f7ff fa15 	bl	8000f08 <robot_PIDCalib>
 8001ade:	e006      	b.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x66>
		}
	}
	else
	{
		intial_speed = 0;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
		robot_setSpeed(0, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff f9ad 	bl	8000e48 <robot_setSpeed>
	}
  }
  if (htim->Instance == TIM4) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d12a      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xc6>
	button_handle();
 8001af8:	f7ff fb66 	bl	80011c8 <button_handle>
	sensor_mask = sensor_writeLED();
 8001afc:	f7ff fabe 	bl	800107c <sensor_writeLED>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b06:	701a      	strb	r2, [r3, #0]
	if((sensor_mask & 0x0F) == 0x07)
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d102      	bne.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		pid_enable = 0;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	}
	if(run_with_sensor == 1)
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d115      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xc6>
	{
		if(sensor_value[3] > 700)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b24:	88db      	ldrh	r3, [r3, #6]
 8001b26:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001b2a:	d905      	bls.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			robot_setRGB(0, 0, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff faeb 	bl	800110c <robot_setRGB>
			run_with_sensor = 0;
		}
	}
  }
  /* USER CODE END Callback 1 */
}
 8001b36:	e00a      	b.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xc6>
			robot_setRGB(0, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fae5 	bl	800110c <robot_setRGB>
			pid_enable = 1;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
			run_with_sensor = 0;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	200001ba 	.word	0x200001ba
 8001b64:	200001ac 	.word	0x200001ac
 8001b68:	200001b4 	.word	0x200001b4
 8001b6c:	200001a6 	.word	0x200001a6
 8001b70:	40000800 	.word	0x40000800
 8001b74:	200001a8 	.word	0x200001a8
 8001b78:	200001bb 	.word	0x200001bb

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x5c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_MspInit+0x60>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_MspInit+0x60>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000

08001bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <HAL_ADC_MspInit+0xe8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d15f      	bne.n	8001ccc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_ADC_MspInit+0xec>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c54:	2370      	movs	r3, #112	; 0x70
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	4619      	mov	r1, r3
 8001c62:	481e      	ldr	r0, [pc, #120]	; (8001cdc <HAL_ADC_MspInit+0xf0>)
 8001c64:	f001 f8ae 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	4619      	mov	r1, r3
 8001c76:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <HAL_ADC_MspInit+0xf4>)
 8001c78:	f001 f8a4 	bl	8002dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_ADC_MspInit+0xfc>)
 8001c80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001cb2:	f000 fe99 	bl	80029e8 <HAL_DMA_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001cbc:	f7ff ff5e 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0xf8>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012400 	.word	0x40012400
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	20000084 	.word	0x20000084
 8001ce8:	40020008 	.word	0x40020008

08001cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_TIM_PWM_MspInit+0x34>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_TIM_PWM_MspInit+0x34>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_TIM_PWM_MspInit+0x34>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_Base_MspInit+0x78>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d114      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	201d      	movs	r0, #29
 8001d54:	f000 fe1d 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d58:	201d      	movs	r0, #29
 8001d5a:	f000 fe36 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d5e:	e018      	b.n	8001d92 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_TIM_Base_MspInit+0x80>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d113      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_Base_MspInit+0x7c>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	201e      	movs	r0, #30
 8001d88:	f000 fe03 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d8c:	201e      	movs	r0, #30
 8001d8e:	f000 fe1c 	bl	80029ca <HAL_NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40000800 	.word	0x40000800

08001da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d117      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_TIM_MspPostInit+0x58>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_TIM_MspPostInit+0x58>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_MspPostInit+0x58>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001de0:	230f      	movs	r3, #15
 8001de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <HAL_TIM_MspPostInit+0x5c>)
 8001df4:	f000 ffe6 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010800 	.word	0x40010800

08001e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_InitTick+0xd0>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <HAL_InitTick+0xd0>)
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_InitTick+0xd0>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e36:	f107 020c 	add.w	r2, r7, #12
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fd51 	bl	80038e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e46:	f001 fd3b 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8001e4a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_InitTick+0xd4>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	3b01      	subs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <HAL_InitTick+0xdc>)
 8001e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e80:	4817      	ldr	r0, [pc, #92]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e82:	f001 fe35 	bl	8003af0 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11b      	bne.n	8001ecc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e94:	4812      	ldr	r0, [pc, #72]	; (8001ee0 <HAL_InitTick+0xd8>)
 8001e96:	f001 fe7b 	bl	8003b90 <HAL_TIM_Base_Start_IT>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ea8:	2019      	movs	r0, #25
 8001eaa:	f000 fd8e 	bl	80029ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d808      	bhi.n	8001ec6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	2019      	movs	r0, #25
 8001eba:	f000 fd6a 	bl	8002992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_InitTick+0xe0>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e002      	b.n	8001ecc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	200001d4 	.word	0x200001d4
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	20000030 	.word	0x20000030

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <DMA1_Channel1_IRQHandler+0x10>)
 8001f42:	f000 fe0b 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000084 	.word	0x20000084

08001f50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM1_UP_IRQHandler+0x10>)
 8001f56:	f001 ff5f 	bl	8003e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001d4 	.word	0x200001d4

08001f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM3_IRQHandler+0x10>)
 8001f6a:	f001 ff55 	bl	8003e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000110 	.word	0x20000110

08001f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM4_IRQHandler+0x10>)
 8001f7e:	f001 ff4b 	bl	8003e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000158 	.word	0x20000158

08001f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff fff8 	bl	8001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb4:	4c09      	ldr	r4, [pc, #36]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f002 fcef 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7ff f961 	bl	800128c <main>
  bx lr
 8001fca:	4770      	bx	lr
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001fd4:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8001fd8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001fdc:	20000220 	.word	0x20000220

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x28>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 fcc1 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f7ff ff04 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fdc2 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_IncTick+0x20>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000034 	.word	0x20000034
 8002030:	2000021c 	.word	0x2000021c

08002034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	2000021c 	.word	0x2000021c

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fff0 	bl	8002034 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffe0 	bl	8002034 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000034 	.word	0x20000034

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0be      	b.n	8002230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fd8c 	bl	8001bec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 faff 	bl	80026d8 <ADC_ConversionStop_Disable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8099 	bne.w	800221e <HAL_ADC_Init+0x18e>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8095 	bne.w	800221e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0xa8>
 8002132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0xaa>
 8002138:	2300      	movs	r3, #0
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_ADC_Init+0x1a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_Init+0x126>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_ADC_Init+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fa:	e018      	b.n	800222e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f023 0312 	bic.w	r3, r3, #18
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	ffe1f7fd 	.word	0xffe1f7fd
 800223c:	ff1f0efe 	.word	0xff1f0efe

08002240 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_Start_DMA+0x24>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <HAL_ADC_Start_DMA+0x32>
 8002264:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80b3 	bne.w	80023d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start_DMA+0x40>
 800227c:	2302      	movs	r3, #2
 800227e:	e0ae      	b.n	80023de <HAL_ADC_Start_DMA+0x19e>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f9cb 	bl	8002624 <ADC_Enable>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 809a 	bne.w	80023ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x84>
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d026      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ee:	e01d      	b.n	800232c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a39      	ldr	r2, [pc, #228]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_ADC_Start_DMA+0xd0>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a38      	ldr	r2, [pc, #224]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10d      	bne.n	800232c <HAL_ADC_Start_DMA+0xec>
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002324:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <HAL_ADC_Start_DMA+0x1b0>)
 800235a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_ADC_Start_DMA+0x1b4>)
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_ADC_Start_DMA+0x1b8>)
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a18      	ldr	r0, [r3, #32]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	334c      	adds	r3, #76	; 0x4c
 8002390:	4619      	mov	r1, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f000 fb81 	bl	8002a9c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023ba:	e00f      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023cc:	e006      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80023d6:	e001      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012400 	.word	0x40012400
 80023ec:	40012800 	.word	0x40012800
 80023f0:	0800275b 	.word	0x0800275b
 80023f4:	080027d7 	.word	0x080027d7
 80023f8:	080027f3 	.word	0x080027f3

080023fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
	...

08002434 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x20>
 8002450:	2302      	movs	r3, #2
 8002452:	e0dc      	b.n	800260e <HAL_ADC_ConfigChannel+0x1da>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d81c      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b05      	subs	r3, #5
 8002476:	221f      	movs	r2, #31
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4019      	ands	r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b05      	subs	r3, #5
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34
 800249c:	e03c      	b.n	8002518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d81c      	bhi.n	80024e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b23      	subs	r3, #35	; 0x23
 80024b8:	221f      	movs	r2, #31
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	4019      	ands	r1, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	; 0x23
 80024d2:	fa00 f203 	lsl.w	r2, r0, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
 80024de:	e01b      	b.n	8002518 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b41      	subs	r3, #65	; 0x41
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b41      	subs	r3, #65	; 0x41
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d91c      	bls.n	800255a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	3b1e      	subs	r3, #30
 8002532:	2207      	movs	r2, #7
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6898      	ldr	r0, [r3, #8]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	3b1e      	subs	r3, #30
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	e019      	b.n	800258e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6919      	ldr	r1, [r3, #16]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	2207      	movs	r2, #7
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4019      	ands	r1, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b10      	cmp	r3, #16
 8002594:	d003      	beq.n	800259e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800259a:	2b11      	cmp	r3, #17
 800259c:	d132      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_ADC_ConfigChannel+0x1e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d125      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d126      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d11a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_ADC_ConfigChannel+0x1e8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_ADC_ConfigChannel+0x1ec>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9a      	lsrs	r2, r3, #18
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x1b2>
 80025f2:	e007      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40012400 	.word	0x40012400
 800261c:	2000002c 	.word	0x2000002c
 8002620:	431bde83 	.word	0x431bde83

08002624 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d040      	beq.n	80026c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <ADC_Enable+0xac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <ADC_Enable+0xb0>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002660:	e002      	b.n	8002668 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800266e:	f7ff fce1 	bl	8002034 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002674:	e01f      	b.n	80026b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002676:	f7ff fcdd 	bl	8002034 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d918      	bls.n	80026b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d011      	beq.n	80026b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e007      	b.n	80026c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d1d8      	bne.n	8002676 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000002c 	.word	0x2000002c
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d12e      	bne.n	8002750 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002702:	f7ff fc97 	bl	8002034 <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002708:	e01b      	b.n	8002742 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800270a:	f7ff fc93 	bl	8002034 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d914      	bls.n	8002742 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10d      	bne.n	8002742 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d0dc      	beq.n	800270a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002770:	2b00      	cmp	r3, #0
 8002772:	d127      	bne.n	80027c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800278a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800278e:	d115      	bne.n	80027bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fe1d 	bl	80023fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027c2:	e004      	b.n	80027ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe12 	bl	800240e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fe01 	bl	8002420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <__NVIC_EnableIRQ+0x34>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff4f 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff64 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ffb2 	bl	8002918 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff81 	bl	80028c4 <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff57 	bl	800288c <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e043      	b.n	8002a86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_DMA_Init+0xa8>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_DMA_Init+0xac>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_DMA_Init+0xb0>)
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	bffdfff8 	.word	0xbffdfff8
 8002a94:	cccccccd 	.word	0xcccccccd
 8002a98:	40020000 	.word	0x40020000

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_DMA_Start_IT+0x20>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e04b      	b.n	8002b54 <HAL_DMA_Start_IT+0xb8>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d13a      	bne.n	8002b46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f937 	bl	8002d68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 020e 	orr.w	r2, r2, #14
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00f      	b.n	8002b34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0204 	bic.w	r2, r2, #4
 8002b22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 020a 	orr.w	r2, r2, #10
 8002b32:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e005      	b.n	8002b52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04f      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d029      	beq.n	8002c0a <HAL_DMA_IRQHandler+0xae>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xaa>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xa4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a62      	ldr	r2, [pc, #392]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x98>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <HAL_DMA_IRQHandler+0x92>
 8002be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bf2:	e00b      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bf8:	e008      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfe:	e005      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c04:	e002      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_IRQHandler+0xb0>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8094 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	e08e      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	2202      	movs	r2, #2
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d056      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d051      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020a 	bic.w	r2, r2, #10
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_DMA_IRQHandler+0x1f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x166>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_DMA_IRQHandler+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <HAL_DMA_IRQHandler+0x1f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x15c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_DMA_IRQHandler+0x1fc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x156>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <HAL_DMA_IRQHandler+0x200>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x150>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_DMA_IRQHandler+0x204>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x14a>
 8002ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x168>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_DMA_IRQHandler+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d034      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ce0:	e02f      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    }
  }
  return;
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
}
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40020008 	.word	0x40020008
 8002d50:	4002001c 	.word	0x4002001c
 8002d54:	40020030 	.word	0x40020030
 8002d58:	40020044 	.word	0x40020044
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	4002006c 	.word	0x4002006c
 8002d64:	40020000 	.word	0x40020000

08002d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e169      	b.n	80030ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8158 	bne.w	80030a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a9a      	ldr	r2, [pc, #616]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e00:	4a98      	ldr	r2, [pc, #608]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d875      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e06:	4a98      	ldr	r2, [pc, #608]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d058      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e0c:	4a96      	ldr	r2, [pc, #600]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d86f      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e12:	4a96      	ldr	r2, [pc, #600]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d052      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e18:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d869      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a94      	ldr	r2, [pc, #592]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04c      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e24:	4a92      	ldr	r2, [pc, #584]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d863      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a92      	ldr	r2, [pc, #584]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d046      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e30:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d85d      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d82a      	bhi.n	8002e90 <HAL_GPIO_Init+0xcc>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d859      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_GPIO_Init+0x80>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002eab 	.word	0x08002eab
 8002e50:	08002eed 	.word	0x08002eed
 8002e54:	08002ef3 	.word	0x08002ef3
 8002e58:	08002ef3 	.word	0x08002ef3
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002ef3 	.word	0x08002ef3
 8002e64:	08002ef3 	.word	0x08002ef3
 8002e68:	08002ef3 	.word	0x08002ef3
 8002e6c:	08002ef3 	.word	0x08002ef3
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	08002ef3 	.word	0x08002ef3
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ef3 	.word	0x08002ef3
 8002e80:	08002ef3 	.word	0x08002ef3
 8002e84:	08002ef3 	.word	0x08002ef3
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	4a79      	ldr	r2, [pc, #484]	; (8003078 <HAL_GPIO_Init+0x2b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e024      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e013      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	611a      	str	r2, [r3, #16]
          break;
 8002ede:	e009      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	615a      	str	r2, [r3, #20]
          break;
 8002eea:	e003      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          break;
 8002ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d801      	bhi.n	8002efe <HAL_GPIO_Init+0x13a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_Init+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d802      	bhi.n	8002f10 <HAL_GPIO_Init+0x14c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x152>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3b08      	subs	r3, #8
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_GPIO_Init+0x2c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_GPIO_Init+0x2c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_GPIO_Init+0x2c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_GPIO_Init+0x2cc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e0>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e004      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e002      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fc2:	492f      	ldr	r1, [pc, #188]	; (8003080 <HAL_GPIO_Init+0x2bc>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	492c      	ldr	r1, [pc, #176]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4928      	ldr	r1, [pc, #160]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	43db      	mvns	r3, r3
 800301a:	491e      	ldr	r1, [pc, #120]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800301c:	4013      	ands	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4918      	ldr	r1, [pc, #96]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4914      	ldr	r1, [pc, #80]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e021      	b.n	80030a6 <HAL_GPIO_Init+0x2e2>
 8003062:	bf00      	nop
 8003064:	10320000 	.word	0x10320000
 8003068:	10310000 	.word	0x10310000
 800306c:	10220000 	.word	0x10220000
 8003070:	10210000 	.word	0x10210000
 8003074:	10120000 	.word	0x10120000
 8003078:	10110000 	.word	0x10110000
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	40010800 	.word	0x40010800
 8003088:	40010c00 	.word	0x40010c00
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_GPIO_Init+0x304>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4909      	ldr	r1, [pc, #36]	; (80030c8 <HAL_GPIO_Init+0x304>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae8e 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	; 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	807b      	strh	r3, [r7, #2]
 8003106:	4613      	mov	r3, r2
 8003108:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800310a:	787b      	ldrb	r3, [r7, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003116:	e003      	b.n	8003120 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	041a      	lsls	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e272      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8087 	beq.w	800325a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800314c:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d00c      	beq.n	8003172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003158:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d112      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
 8003164:	4b8c      	ldr	r3, [pc, #560]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d10b      	bne.n	800318a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	4b89      	ldr	r3, [pc, #548]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d06c      	beq.n	8003258 <HAL_RCC_OscConfig+0x12c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d168      	bne.n	8003258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e24c      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x76>
 8003194:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7f      	ldr	r2, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e02e      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a77      	ldr	r2, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0xbc>
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xd4>
 80031e8:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a67      	ldr	r2, [pc, #412]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe ff14 	bl	8002034 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe ff10 	bl	8002034 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e200      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xe4>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe ff00 	bl	8002034 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fefc 	bl	8002034 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1ec      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x10c>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003266:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c0      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4939      	ldr	r1, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_OscConfig+0x270>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe feb5 	bl	8002034 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe feb1 	bl	8002034 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4927      	ldr	r1, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x270>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fe94 	bl	8002034 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fe90 	bl	8002034 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e180      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03a      	beq.n	80033b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe fe74 	bl	8002034 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fe70 	bl	8002034 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e160      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCC_OscConfig+0x26c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f000 faea 	bl	8003948 <RCC_Delay>
 8003374:	e01c      	b.n	80033b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fe5a 	bl	8002034 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fe fe56 	bl	8002034 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e146      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	42420000 	.word	0x42420000
 80033a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e9      	bne.n	8003384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a6 	beq.w	800350a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]
 80033da:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fe17 	bl	8002034 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fe13 	bl	8002034 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e103      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4c8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x312>
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e02d      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a69      	ldr	r2, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	e01c      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0x356>
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x36e>
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a5a      	ldr	r2, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d015      	beq.n	80034ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fdc7 	bl	8002034 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fdc3 	bl	8002034 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0b1      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ee      	beq.n	80034aa <HAL_RCC_OscConfig+0x37e>
 80034cc:	e014      	b.n	80034f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ce:	f7fe fdb1 	bl	8002034 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fdad 	bl	8002034 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e09b      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8087 	beq.w	8003622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d061      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d146      	bne.n	80035b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe fd81 	bl	8002034 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fd7d 	bl	8002034 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e06d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4921      	ldr	r1, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a19      	ldr	r1, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	430b      	orrs	r3, r1
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fd51 	bl	8002034 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fd4d 	bl	8002034 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x46a>
 80035b4:	e035      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fd3a 	bl	8002034 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fd36 	bl	8002034 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e026      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x498>
 80035e2:	e01e      	b.n	8003622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e019      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x500>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	4965      	ldr	r1, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d040      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e073      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe fc88 	bl	8002034 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fc84 	bl	8002034 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e053      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d210      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4922      	ldr	r1, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fb12 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08004a04 	.word	0x08004a04
 80037fc:	2000002c 	.word	0x2000002c
 8003800:	20000030 	.word	0x20000030

08003804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_GetSysClockFreq+0x94>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x30>
 800382e:	2b08      	cmp	r3, #8
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x36>
 8003832:	e027      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003836:	613b      	str	r3, [r7, #16]
      break;
 8003838:	e027      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0c9b      	lsrs	r3, r3, #18
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003844:	5cd3      	ldrb	r3, [r2, r3]
 8003846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_GetSysClockFreq+0x94>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0c5b      	lsrs	r3, r3, #17
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003866:	fb03 f202 	mul.w	r2, r3, r2
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e004      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	613b      	str	r3, [r7, #16]
      break;
 8003882:	e002      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetSysClockFreq+0x98>)
 8003886:	613b      	str	r3, [r7, #16]
      break;
 8003888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388a:	693b      	ldr	r3, [r7, #16]
}
 800388c:	4618      	mov	r0, r3
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	08004a1c 	.word	0x08004a1c
 80038a4:	08004a2c 	.word	0x08004a2c
 80038a8:	003d0900 	.word	0x003d0900

080038ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_RCC_GetHCLKFreq+0x10>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	2000002c 	.word	0x2000002c

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff fff2 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0adb      	lsrs	r3, r3, #11
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08004a14 	.word	0x08004a14

080038e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	220f      	movs	r2, #15
 80038f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_GetClockConfig+0x58>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_RCC_GetClockConfig+0x58>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_GetClockConfig+0x58>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_GetClockConfig+0x58>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetClockConfig+0x5c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0207 	and.w	r2, r3, #7
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40022000 	.word	0x40022000

08003948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <RCC_Delay+0x34>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <RCC_Delay+0x38>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003964:	bf00      	nop
  }
  while (Delay --);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	60fa      	str	r2, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f9      	bne.n	8003964 <RCC_Delay+0x1c>
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	2000002c 	.word	0x2000002c
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d07d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d8:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fe fb26 	bl	8002034 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe fb22 	bl	8002034 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e06d      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02e      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d027      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a28:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a3e:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe faf1 	bl	8002034 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe faed 	bl	8002034 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e036      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4917      	ldr	r1, [pc, #92]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	490b      	ldr	r1, [pc, #44]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4904      	ldr	r1, [pc, #16]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42420440 	.word	0x42420440

08003af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e041      	b.n	8003b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe f904 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 fc10 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e03a      	b.n	8003c1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_Base_Start_IT+0x98>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x58>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d009      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x58>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_TIM_Base_Start_IT+0x9c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x58>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <HAL_TIM_Base_Start_IT+0xa0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d111      	bne.n	8003c0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d010      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	e007      	b.n	8003c1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800

08003c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e041      	b.n	8003cca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe f846 	bl	8001cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 fb6e 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0x24>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e022      	b.n	8003d3e <HAL_TIM_PWM_Start+0x6a>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d109      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x3e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e015      	b.n	8003d3e <HAL_TIM_PWM_Start+0x6a>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d109      	bne.n	8003d2c <HAL_TIM_PWM_Start+0x58>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e008      	b.n	8003d3e <HAL_TIM_PWM_Start+0x6a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e05e      	b.n	8003e04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x82>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d54:	e013      	b.n	8003d7e <HAL_TIM_PWM_Start+0xaa>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0x92>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d64:	e00b      	b.n	8003d7e <HAL_TIM_PWM_Start+0xaa>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_PWM_Start+0xa2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d74:	e003      	b.n	8003d7e <HAL_TIM_PWM_Start+0xaa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd70 	bl	800486c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <HAL_TIM_PWM_Start+0x138>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d107      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIM_PWM_Start+0x138>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIM_PWM_Start+0xfa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d009      	beq.n	8003dce <HAL_TIM_PWM_Start+0xfa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <HAL_TIM_PWM_Start+0x13c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIM_PWM_Start+0xfa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_TIM_PWM_Start+0x140>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d111      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d010      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	e007      	b.n	8003e02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800

08003e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d020      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0202 	mvn.w	r2, #2
 8003e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa5a 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa4d 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa5c 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d020      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01b      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0204 	mvn.w	r2, #4
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa34 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa27 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa36 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d020      	beq.n	8003f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0208 	mvn.w	r2, #8
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa0e 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa01 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa10 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9e8 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9db 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9ea 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0201 	mvn.w	r2, #1
 8003f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd fd82 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fced 	bl	8004982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00c      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f9ba 	bl	8004340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0220 	mvn.w	r2, #32
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fcc0 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004012:	2302      	movs	r3, #2
 8004014:	e0ae      	b.n	8004174 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	f200 809f 	bhi.w	8004164 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004061 	.word	0x08004061
 8004030:	08004165 	.word	0x08004165
 8004034:	08004165 	.word	0x08004165
 8004038:	08004165 	.word	0x08004165
 800403c:	080040a1 	.word	0x080040a1
 8004040:	08004165 	.word	0x08004165
 8004044:	08004165 	.word	0x08004165
 8004048:	08004165 	.word	0x08004165
 800404c:	080040e3 	.word	0x080040e3
 8004050:	08004165 	.word	0x08004165
 8004054:	08004165 	.word	0x08004165
 8004058:	08004165 	.word	0x08004165
 800405c:	08004123 	.word	0x08004123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9e2 	bl	8004430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
      break;
 800409e:	e064      	b.n	800416a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa28 	bl	80044fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	021a      	lsls	r2, r3, #8
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
      break;
 80040e0:	e043      	b.n	800416a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa71 	bl	80045d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0208 	orr.w	r2, r2, #8
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0204 	bic.w	r2, r2, #4
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
      break;
 8004120:	e023      	b.n	800416a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fabb 	bl	80046a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
      break;
 8004162:	e002      	b.n	800416a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
      break;
 8004168:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIM_ConfigClockSource+0x1c>
 8004194:	2302      	movs	r3, #2
 8004196:	e0b4      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x186>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d0:	d03e      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0xd4>
 80041d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d6:	f200 8087 	bhi.w	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	f000 8086 	beq.w	80042ee <HAL_TIM_ConfigClockSource+0x172>
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d87f      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d01a      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xa6>
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d87b      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b60      	cmp	r3, #96	; 0x60
 80041f2:	d050      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x11a>
 80041f4:	2b60      	cmp	r3, #96	; 0x60
 80041f6:	d877      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b50      	cmp	r3, #80	; 0x50
 80041fa:	d03c      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xfa>
 80041fc:	2b50      	cmp	r3, #80	; 0x50
 80041fe:	d873      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d058      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d86f      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b30      	cmp	r3, #48	; 0x30
 800420a:	d064      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x15a>
 800420c:	2b30      	cmp	r3, #48	; 0x30
 800420e:	d86b      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d060      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004214:	2b20      	cmp	r3, #32
 8004216:	d867      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05c      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x15a>
 800421c:	2b10      	cmp	r3, #16
 800421e:	d05a      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	e062      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	f000 fafc 	bl	800482e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	609a      	str	r2, [r3, #8]
      break;
 800424e:	e04f      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004260:	f000 fae5 	bl	800482e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004272:	609a      	str	r2, [r3, #8]
      break;
 8004274:	e03c      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fa5c 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2150      	movs	r1, #80	; 0x50
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fab3 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8004294:	e02c      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	461a      	mov	r2, r3
 80042a4:	f000 fa7a 	bl	800479c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2160      	movs	r1, #96	; 0x60
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 faa3 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80042b4:	e01c      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 fa3c 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa93 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80042d4:	e00c      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f000 fa8a 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 80042e6:	e003      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e000      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
	...

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <TIM_Base_SetConfig+0xd0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <TIM_Base_SetConfig+0xd4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x30>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2b      	ldr	r2, [pc, #172]	; (800442c <TIM_Base_SetConfig+0xd8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <TIM_Base_SetConfig+0xd0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <TIM_Base_SetConfig+0xd4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x62>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_Base_SetConfig+0xd8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <TIM_Base_SetConfig+0xd0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	611a      	str	r2, [r3, #16]
  }
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800

08004430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 0201 	bic.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0302 	bic.w	r3, r3, #2
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <TIM_OC1_SetConfig+0xc8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10c      	bne.n	80044a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0308 	bic.w	r3, r3, #8
 8004492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <TIM_OC1_SetConfig+0xc8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d111      	bne.n	80044d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00

080044fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f023 0210 	bic.w	r2, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM_OC2_SetConfig+0xd0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10d      	bne.n	8004578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <TIM_OC2_SetConfig+0xd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d113      	bne.n	80045a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40012c00 	.word	0x40012c00

080045d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <TIM_OC3_SetConfig+0xd0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10d      	bne.n	800464a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <TIM_OC3_SetConfig+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d113      	bne.n	800467a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40012c00 	.word	0x40012c00

080046a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a0f      	ldr	r2, [pc, #60]	; (800473c <TIM_OC4_SetConfig+0x98>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d109      	bne.n	8004718 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00

08004740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	031b      	lsls	r3, r3, #12
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	f043 0307 	orr.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800482e:	b480      	push	{r7}
 8004830:	b087      	sub	sp, #28
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	431a      	orrs	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4313      	orrs	r3, r2
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	609a      	str	r2, [r3, #8]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2201      	movs	r2, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e046      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d009      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <memset>:
 8004994:	4603      	mov	r3, r0
 8004996:	4402      	add	r2, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	2600      	movs	r6, #0
 80049a8:	4d0c      	ldr	r5, [pc, #48]	; (80049dc <__libc_init_array+0x38>)
 80049aa:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049ac:	1b64      	subs	r4, r4, r5
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	f000 f81a 	bl	80049ec <_init>
 80049b8:	2600      	movs	r6, #0
 80049ba:	4d0a      	ldr	r5, [pc, #40]	; (80049e4 <__libc_init_array+0x40>)
 80049bc:	4c0a      	ldr	r4, [pc, #40]	; (80049e8 <__libc_init_array+0x44>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08004a30 	.word	0x08004a30
 80049e0:	08004a30 	.word	0x08004a30
 80049e4:	08004a30 	.word	0x08004a30
 80049e8:	08004a34 	.word	0x08004a34

080049ec <_init>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr

080049f8 <_fini>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr
